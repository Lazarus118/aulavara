from app import db
from datetime import datetime
import hashlib

ROLE_USER = 0
ROLE_ADMIN = 1


class User(db.Model):
	id = db.Column(db.Integer, primary_key=True)
     	username = db.Column(db.String(20), index=True, unique=True)
     	password = db.Column(db.String(64), index=True)
     	email = db.Column(db.String(64), index=True, unique=True)
	comments = db.relationship('Comment', backref='author', lazy='dynamic')

     	def is_authenticated(self):
        	 return True
     	def is_active(self):
        	 return True
     	def is_anonymous(self):
        	 return False
     	def get_auth_token(self):
        	 return unicode(hashlib.sha1(self.username +
        	self.password).hexdigest())
     	def get_id(self):
        	 return unicode(self.id)
     	def __repr__(self):
        	 return '<User %r>' % (self.username)
		
class Image(db.Model):
	id = db.Column(db.Integer, primary_key=True)
	photo_description = db.Column(db.Unicode(64))
	photo_filename = db.Column(db.Unicode(128))
	#uploaded_at = db.Column(db.DateTime())
	
	def __init__ (self, photo_description, photo_filename, like, comments):
		self.photo_description = photo_description
		self.photo_filename = photo_filename

"""		
class Social(db.Model):
	id = db.Column(db.Integer, primary_key=True)
	user_id = db.Column(db.Integer, db.ForeignKey('user.username')) #Relationship mapping 
	user_posted = db.relationship('User', foreign_keys=user_id) #Relationship Mapping
	comments = db.Column(db.String(100))
	like = db.Column(db.Integer, primary_key=True)
	
	def __init__(self, comments, like):
		self.comments = comments
		self.like = like
	def __repr__(self):
		return '<Social %s>' % (self.comments)
"""		
		
		
class Comment(db.Model):
	__tablename__ = 'comments'
	
	id = db.Column(db.Integer, primary_key=True)
	body = db.Column(db.Text)
	body_html = db.Column(db.Text)
	timestamp = db.Column(db.DateTime, index=True)
	disabled = db.Column(db.Boolean)
	author_id = db.Column(db.Integer, db.ForeignKey('users.id'))
		
